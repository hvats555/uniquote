[{"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\index.js":"1","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\App.js":"2","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\reportWebVitals.js":"3","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\firebase.js":"4","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductSearch\\ProductSearch.js":"5","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Home.js":"6","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\AllQuotations.js":"7","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Logo\\Logo.js":"8","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Customers\\CustomerInputForm.js":"9","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductTable\\ProductTable.js":"10","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Layout\\Layout.js":"11","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Modal\\Modal.js":"12","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductSearch\\ProductSearchResults\\ProductSearchResults.js":"13","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Input\\Input.js":"14","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\AllProducts\\AllProducts.js":"15","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\AddQuotation.js":"16","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\AddProduct.js":"17","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Auth\\Login\\Login.js":"18","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Header\\Header.js":"19","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Dashboard\\Dashboard.js":"20","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\PrivateRoute.js":"21","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\contexts\\AuthContext.js":"22","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\EditProduct\\EditProduct.js":"23","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\EditQuotation.js":"24"},{"size":500,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":1856,"mtime":1609003690976,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":688,"mtime":1609003690985,"results":"29","hashOfConfig":"26"},{"size":3908,"mtime":1608207481424,"results":"30","hashOfConfig":"26"},{"size":201,"mtime":1607535418030,"results":"31","hashOfConfig":"26"},{"size":2113,"mtime":1609003690982,"results":"32","hashOfConfig":"26"},{"size":187,"mtime":1607532671452,"results":"33","hashOfConfig":"26"},{"size":2691,"mtime":1608118155414,"results":"34","hashOfConfig":"26"},{"size":2268,"mtime":1608304012434,"results":"35","hashOfConfig":"26"},{"size":3065,"mtime":1609067025348,"results":"36","hashOfConfig":"26"},{"size":1167,"mtime":1607627081843,"results":"37","hashOfConfig":"26"},{"size":917,"mtime":1608203700601,"results":"38","hashOfConfig":"26"},{"size":620,"mtime":1609065807431,"results":"39","hashOfConfig":"26"},{"size":3297,"mtime":1609003690979,"results":"40","hashOfConfig":"26"},{"size":14592,"mtime":1609003690982,"results":"41","hashOfConfig":"26"},{"size":5873,"mtime":1609066483360,"results":"42","hashOfConfig":"26"},{"size":1129,"mtime":1608571231413,"results":"43","hashOfConfig":"26"},{"size":1405,"mtime":1609066918633,"results":"44","hashOfConfig":"26"},{"size":1001,"mtime":1608565713033,"results":"45","hashOfConfig":"26"},{"size":427,"mtime":1608567598019,"results":"46","hashOfConfig":"26"},{"size":1479,"mtime":1608569657208,"results":"47","hashOfConfig":"26"},{"size":7313,"mtime":1609066001603,"results":"48","hashOfConfig":"26"},{"size":14659,"mtime":1609003690983,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1o2cly5",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\index.js",[],["105","106"],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\App.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\reportWebVitals.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\firebase.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductSearch\\ProductSearch.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Home.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\AllQuotations.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Logo\\Logo.js",[],["107","108"],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Customers\\CustomerInputForm.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductTable\\ProductTable.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Layout\\Layout.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Modal\\Modal.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\ProductSearch\\ProductSearchResults\\ProductSearchResults.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Input\\Input.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\AllProducts\\AllProducts.js",["109","110","111"],"import {useState, useEffect} from 'react';\r\nimport db from '../../../firebase';\r\nimport './AllProducts.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\nimport {storage} from '../../../firebase';\r\n\r\nconst linkStyle = {\r\n  color: 'white',\r\n  textDecoration: 'none'\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    color: theme.palette.text.primary\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary\r\n  },\r\n  heading: {\r\n    textTransform: 'uppercase',\r\n    fontSize: '22px',\r\n  }\r\n}));\r\n\r\nfunction AllProducts() {\r\n  const classes = useStyles();\r\n    const [product, setProduct] = useState([]);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    const handleOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        db.collection('products').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n          setProduct(snapshot.docs.map(doc => (\r\n            {id: doc.id,\r\n              modelNumber: doc.data().modelNumber,\r\n              description: doc.data().description,\r\n              price: doc.data().price,\r\n              imageURL: doc.data().imageURL,\r\n              imageFileName: doc.data().imageFileName\r\n            })))\r\n        })\r\n      }, []);\r\n\r\n      const deleteProductImage = (imageRef) => {\r\n        const deleteRef = storage.ref().child(`productImages/${imageRef}`);\r\n        deleteRef.delete().then(function(){\r\n          console.log(\"File deleted successfully\");\r\n        }).catch(function(error){\r\n          console.log(\"Cannot delete file\");\r\n        });\r\n      }\r\n\r\n      const deleteProductHandler = (id, imageFileName) => {\r\n        deleteProductImage(imageFileName);\r\n        db.collection('products').doc(id).delete();\r\n      }\r\n\r\n      const storageRef = storage.ref();\r\n      console.log(storageRef);\r\n    return (\r\n          <div className={classes.root}>\r\n            <Grid container spacing={2}>\r\n              {product.map(p => (\r\n                <Grid item xs={3} key={p.id}>\r\n                  <Paper className={classes.paper}>\r\n                    <div className='imageContainer'>\r\n                      <img id=\"productImage\" className='productImage' src={p.imageURL} alt=\"product\" />\r\n                    </div>\r\n                    <h1 className={classes.heading}>{p.modelNumber}</h1>\r\n                    <p className={classes.content}>{p.description}</p>\r\n                    <p>Price: ₹{p.price}</p>\r\n                    <div className=\"productOptions\">\r\n                      <Link style={linkStyle} to={`/products/${p.id}/edit`}>\r\n                        <Button size=\"small\" variant=\"contained\" color=\"primary\">Edit</Button>\r\n                      </Link>\r\n                    <Button color=\"secondary\" onClick={event => deleteProductHandler(p.id, p.imageFileName)}>Delete</Button>\r\n                    </div>\r\n                  </Paper>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default AllProducts\r\n","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\AddQuotation.js",["112"],"import React, {useState} from 'react'\r\nimport db from '../../firebase';\r\nimport firebase from 'firebase';\r\nimport ProductSearch from '../Products/ProductSearch/ProductSearch';\r\nimport ProductTable from '../Products/ProductTable/ProductTable';\r\nimport CustomerInputForm from '../Customers/CustomerInputForm';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport {useAuth} from '../../contexts/AuthContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  quotationSubmitButton : {\r\n      margin: '25px 0'\r\n  },\r\n  quotationShow : {\r\n    color: 'white',\r\n    backgroundColor: 'orange'\r\n  }\r\n}));\r\n\r\nfunction AddQuotation() {  \r\n    const classes = useStyles();\r\n    const {currentUser} = useAuth();\r\n\r\n    console.log(currentUser);\r\n  \r\n    const quotationInitialState = {name : '', address: '', phoneNumber: '', email: '', gstin: '', products: []};\r\n    const productInitialState = {brand: '', modelNumber: '', quantity: '', discount: '', tax: ''};\r\n    \r\n    const [pdfLink, setPdfLink] = useState('');\r\n\r\n    const [quotation, setQuotation] = useState({\r\n      name: '',\r\n      address: '',\r\n      phoneNumber: '',\r\n      email: ''\r\n    });\r\n\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    const [product, setProduct] = useState({\r\n      brand: '',\r\n      modelNumber: '',\r\n      quantity: '',\r\n      tax: '',\r\n      discount: ''\r\n    });\r\n\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    const handleOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    const [productValidationErrors, setProductValidationErrors] = useState({\r\n      brand: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      modelNumber: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      quantity: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      tax: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      discount: {\r\n        isError: false,\r\n        errorText: ''\r\n      }\r\n    });\r\n\r\n    const [quotationValidationErrors, setQuotationValidationErrors] = useState({\r\n      name: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      address: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      phoneNumber: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      email: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      products: {\r\n        isError: false,\r\n        errorText: ''\r\n      }\r\n    });\r\n\r\n    const handleQuotationValidation = () => {\r\n      const fields = quotation;\r\n      let errors = {...quotationValidationErrors};\r\n      let formIsValid = true;\r\n      \r\n      // Cannot be empty\r\n      if(!fields['name']){\r\n        formIsValid = false;\r\n        errors.name['isError'] = !formIsValid;\r\n        errors.name['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['address']){\r\n        formIsValid = false;\r\n        errors.address['isError'] = !formIsValid;\r\n        errors.address['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['phoneNumber']){\r\n        formIsValid = false;\r\n        errors.phoneNumber['isError'] = !formIsValid;\r\n        errors.phoneNumber['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['phoneNumber'] && isNaN(fields['phoneNumber'])){\r\n        formIsValid = false;\r\n        errors.phoneNumber['isError'] = !formIsValid;\r\n        errors.phoneNumber['errorText'] = 'Quantity has to be a number';\r\n      }\r\n\r\n      if(!fields['email']){\r\n        formIsValid = false;\r\n        errors.email['isError'] = !formIsValid;\r\n        errors.email['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(typeof fields[\"email\"] !== \"undefined\"){\r\n        let lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n        let lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n          formIsValid = false;\r\n          errors.email['isError'] = !formIsValid;\r\n          errors.email[\"errorText\"] = \"Email is not valid\";\r\n         }\r\n      }\r\n      \r\n      if(typeof fields['products'] == 'undefined' || fields['products'].length == 0){\r\n        formIsValid = false;\r\n        errors.products['isError'] = !formIsValid;\r\n        errors.products[\"errorText\"] = \"You must add atleast 1 product.\";\r\n      }\r\n\r\n      setQuotationValidationErrors(errors);\r\n\r\n      return formIsValid;\r\n    }\r\n\r\n    const handleProductValidation = () => {\r\n      const fields = product;\r\n      let errors = {...productValidationErrors};\r\n      let formIsValid = true;\r\n      \r\n      // Cannot be empty\r\n      if(!fields['modelNumber']){\r\n        formIsValid = false;\r\n        errors.modelNumber['isError'] = !formIsValid;\r\n        errors.modelNumber['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['brand']){\r\n        formIsValid = false;\r\n        errors.brand['isError'] = !formIsValid;\r\n        errors.brand['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['quantity']){\r\n        formIsValid = false;\r\n        errors.quantity['isError'] = !formIsValid;\r\n        errors.quantity['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['quantity'] && isNaN(fields['quantity'])){\r\n        formIsValid = false;\r\n        errors.quantity['isError'] = !formIsValid;\r\n        errors.price['errorText'] = 'Quantity has to be a number';\r\n      }\r\n\r\n      if(!fields['tax']){\r\n        formIsValid = false;\r\n        errors.tax['isError'] = !formIsValid;\r\n        errors.tax['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['tax'] && isNaN(fields['tax'])){\r\n        formIsValid = false;\r\n        errors.tax['isError'] = !formIsValid;\r\n        errors.tax['errorText'] = 'Tax has to be a number';\r\n      }\r\n\r\n      if(!fields['discount']){\r\n        formIsValid = false;\r\n        errors.discount['isError'] = !formIsValid;\r\n        errors.discount['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // discount has to be a number\r\n      if(fields['discount'] && isNaN(fields['discount'])){\r\n        formIsValid = false;\r\n        errors.disocunt['isError'] = !formIsValid;\r\n        errors.disocunt['errorText'] = 'Discount has to be a number';\r\n      }\r\n\r\n      setProductValidationErrors(errors);\r\n      return formIsValid;\r\n    }\r\n\r\n    async function searchDb(event){\r\n        setSearchResults([]);\r\n        if(event.target.value !== ''){\r\n          await db.collection('products').where('modelNumber', '>=', event.target.value).where('modelNumber', '<=', event.target.value + '\\uf8ff').get().then(function(snapshot){      \r\n            setSearchResults(snapshot.docs.map(doc => (\r\n              {\r\n                productId:doc.id,\r\n                modelNumber: doc.data().modelNumber,\r\n                description: doc.data().description,\r\n                imageURL: doc.data().imageURL,\r\n                price: doc.data().price\r\n              }\r\n            )));\r\n          });\r\n        }\r\n      }\r\n    \r\n      const searchListClickHandler = (selectedproduct) => {\r\n          setProduct({...product, ...selectedproduct});\r\n          setSearchResults([]);\r\n      }\r\n\r\n      const productInputHandler = (key, value) => {\r\n        setProduct({...product, [key]: value});\r\n      }\r\n\r\n      const customerInputHandler = (key, value) => {\r\n        setQuotation({...quotation, [key]: value});\r\n      }\r\n\r\n      const calculateProductPricing = (unitPrice, quantity, tax, discount) => {\r\n        const productPrice = unitPrice * quantity;\r\n        const taxValue = (tax/100)* productPrice;\r\n        const discountValue = Math.ceil((discount/100) * productPrice);\r\n        const totalPrice = Math.ceil((productPrice - discountValue) + taxValue);\r\n\r\n        const productPricing = {\r\n          productPrice : productPrice,\r\n          taxValue: taxValue,\r\n          discountValue: discountValue,\r\n          totalPrice: totalPrice\r\n        }\r\n\r\n        if(totalPrice === taxValue){\r\n            return 0\r\n        }else{\r\n          return productPricing;\r\n        }\r\n    }\r\n    \r\n      const addProductHandler = (event) => { \r\n        if(handleProductValidation()){\r\n          let newQuotation = quotation;   \r\n          let newProduct = product;  \r\n          let grandTotal = 0;\r\n          let totalTax = 0;\r\n          let totalDiscount = 0;\r\n          let productPricing = calculateProductPricing(newProduct.price, newProduct.quantity, newProduct.tax, newProduct.discount);\r\n          console.log(productPricing);\r\n\r\n          newProduct['productPricing'] = productPricing;\r\n\r\n          newQuotation['products'] = newQuotation['products'] ? newQuotation['products'] : [];\r\n\r\n          newQuotation['products'].push(newProduct);\r\n\r\n          newQuotation.products.forEach(product => {\r\n            grandTotal += product.productPricing.totalPrice;\r\n            totalDiscount += product.productPricing.discountValue;\r\n            totalTax += product.productPricing.taxValue;\r\n          });\r\n\r\n          newQuotation['totalPricing'] = {\r\n            grandTotal: grandTotal,\r\n            totalDiscount: totalDiscount,\r\n            totalTax: totalTax,\r\n          };\r\n\r\n          setQuotation(newQuotation);\r\n          setProduct(productInitialState);\r\n\r\n          setProductValidationErrors({\r\n            brand: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            modelNumber: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            quantity: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            tax: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            discount: {\r\n              isError: false,\r\n              errorText: ''\r\n            }\r\n          })\r\n        }\r\n        event.preventDefault();\r\n\r\n      }\r\n\r\n      const quotationSubmitHandler = () => {\r\n        if(handleQuotationValidation()){\r\n          let newQuotation = quotation;\r\n          newQuotation[\"timestamp\"] = firebase.firestore.FieldValue.serverTimestamp();\r\n          db.collection(\"quotations\").add(newQuotation).then(async function(docRef) {\r\n            setPdfLink(`https://us-central1-uniquote-d48ca.cloudfunctions.net/makePdf/quotations/${docRef.id}/pdf`);\r\n          })\r\n          .catch(function(error) {\r\n              console.error(\"Error adding document: \", error);\r\n          });\r\n  \r\n          setQuotation(quotationInitialState);\r\n          setProduct(productInitialState);\r\n          setQuotationValidationErrors({\r\n            name: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            address: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            phoneNumber: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            email: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            products: {\r\n              isError: false,\r\n              errorText: ''\r\n            }\r\n          });\r\n          handleOpen();\r\n        }\r\n\r\n      }\r\n\r\n      const deleteTableProduct = (productId) => {\r\n        let newQuotation = {...quotation};\r\n\r\n        const productIndex = newQuotation.products.findIndex(p => p.productId === productId);\r\n\r\n        newQuotation.totalPricing['grandTotal'] -= newQuotation.products[productIndex].productPricing.totalPrice;\r\n        newQuotation.totalPricing['totalDiscount'] -= newQuotation.products[productIndex].productPricing.discountValue;\r\n        newQuotation.totalPricing['totalTax'] -= newQuotation.products[productIndex].productPricing.taxValue;\r\n\r\n        if(productIndex > -1){\r\n          newQuotation.products.splice(productIndex, 1);\r\n        }\r\n\r\n        setQuotation(newQuotation);\r\n      }\r\n\r\n      const editTableProduct = (productId) => {\r\n        let newQuotation = {...quotation};\r\n        let newProduct = {};\r\n        const productIndex = newQuotation.products.findIndex(p => p.productId === productId);\r\n\r\n        if(productIndex > -1){\r\n            newProduct = {\r\n              brand: newQuotation.products[productIndex].brand,\r\n              modelNumber: newQuotation.products[productIndex].modelNumber,\r\n              description: newQuotation.products[productIndex].description,\r\n              price: newQuotation.products[productIndex].price,\r\n              imageURL: newQuotation.products[productIndex].imageURL,\r\n              quantity: newQuotation.products[productIndex].quantity,\r\n              discount: newQuotation.products[productIndex].discount,\r\n              tax: newQuotation.products[productIndex].tax\r\n            }\r\n        }\r\n        setProduct(newProduct);\r\n        deleteTableProduct(productId);\r\n      }\r\n\r\n      console.log(quotation.products);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Create new Quotation</h1>\r\n\r\n            <CustomerInputForm \r\n            quotation={quotation} \r\n            customerInputHandler={customerInputHandler}\r\n            validationErrors={quotationValidationErrors} \r\n            ></CustomerInputForm>\r\n\r\n            <ProductTable editTableProduct={editTableProduct} deleteTableProduct={deleteTableProduct} quotation={quotation} />\r\n\r\n            <ProductSearch \r\n                  addProductHandler={addProductHandler} \r\n                  productInputHandler={productInputHandler} \r\n                  searchResults={searchResults} \r\n                  product={product} searchDb={searchDb} \r\n                  calculateProductPrice={calculateProductPricing} \r\n                  searchListClickHandler={searchListClickHandler}\r\n                  validationErrors={productValidationErrors} \r\n                  />\r\n            \r\n            <Button \r\n            className={classes.quotationSubmitButton} \r\n            size=\"large\" \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={() => {quotationSubmitHandler()}}>Save Quotation</Button> \r\n\r\n            <div style={{color: 'red'}}>\r\n                {quotationValidationErrors.products.isError ? quotationValidationErrors.products.errorText : null}\r\n            </div>\r\n\r\n            <Modal open={open} handleClose={handleClose}>\r\n              <p>Quotation has been saved</p>\r\n              <a href={pdfLink}>Download PDF</a>\r\n            </Modal>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default AddQuotation\r\n","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\AddProduct.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Auth\\Login\\Login.js",["113","114","115"],"import React, {useRef, useState} from 'react';\r\nimport {useAuth} from \"../../../contexts/AuthContext\";\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const {login} = useAuth();\r\n    const {currentUser} = useAuth();\r\n    const history = useHistory();\r\n\r\n    async function handleSubmit(event){\r\n        event.preventDefault()\r\n\r\n        try{\r\n            const res = await login(emailRef.current.value, passwordRef.current.value);\r\n            history.push('/');\r\n            console.log(currentUser);\r\n        } catch {\r\n            console.log(\"Failed to login\");\r\n            console.log(currentUser);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {!currentUser ?\r\n            <form onSubmit={handleSubmit}>\r\n                Email : <input type=\"text\" ref={emailRef}></input>\r\n                Password: <input type=\"password\" ref={passwordRef}></input>\r\n                <button type=\"submit\">Login</button>\r\n            </form> : <Redirect to=\"/\" />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login","C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\UI\\Header\\Header.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Dashboard\\Dashboard.js",[],["116","117"],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\PrivateRoute.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\contexts\\AuthContext.js",[],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Products\\EditProduct\\EditProduct.js",["118","119","120","121"],"C:\\Users\\ayush\\Desktop\\programming\\uniquote\\src\\components\\Quotations\\EditQuotation.js",["122","123"],"import React, {useState, useEffect} from 'react'\r\nimport db from '../../firebase';\r\nimport firebase from 'firebase';\r\nimport ProductSearch from '../Products/ProductSearch/ProductSearch';\r\nimport ProductTable from '../Products/ProductTable/ProductTable';\r\nimport CustomerInputForm from '../Customers/CustomerInputForm';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Modal from '../UI/Modal/Modal';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  quotationSubmitButton : {\r\n      margin: '25px 0'\r\n  },\r\n  quotationShow : {\r\n    color: 'white',\r\n    backgroundColor: 'orange'\r\n  }\r\n}));\r\n\r\nfunction EditQuotation({match}) {  \r\n    const classes = useStyles();\r\n  \r\n    const quotationInitialState = {name : '', address: '', phoneNumber: '', email: '', gstin: '', products: []};\r\n    const productInitialState = {brand: '', modelNumber: '', quantity: '', discount: '', tax: ''};\r\n    \r\n    const [pdfLink, setPdfLink] = useState('');\r\n\r\n    const [quotation, setQuotation] = useState({\r\n      name: '',\r\n      address: '',\r\n      phoneNumber: '',\r\n      email: ''\r\n    });\r\n\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    const [product, setProduct] = useState({\r\n      brand: '',\r\n      modelNumber: '',\r\n      quantity: '',\r\n      tax: '',\r\n      discount: ''\r\n    });\r\n\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    const handleOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    const [productValidationErrors, setProductValidationErrors] = useState({\r\n      brand: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      modelNumber: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      quantity: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      tax: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      discount: {\r\n        isError: false,\r\n        errorText: ''\r\n      }\r\n    });\r\n\r\n    const [quotationValidationErrors, setQuotationValidationErrors] = useState({\r\n      name: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      address: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      phoneNumber: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      email: {\r\n        isError: false,\r\n        errorText: ''\r\n      },\r\n      products: {\r\n        isError: false,\r\n        errorText: ''\r\n      }\r\n    });\r\n\r\n    useEffect(() => {\r\n        db.collection('quotations').doc(match.params.id).get().then(function(snapshot){\r\n          setQuotation(snapshot.data());\r\n        })\r\n    }, []);\r\n\r\n    const handleQuotationValidation = () => {\r\n      const fields = quotation;\r\n      let errors = {...quotationValidationErrors};\r\n      let formIsValid = true;\r\n      \r\n      // Cannot be empty\r\n      if(!fields['name']){\r\n        formIsValid = false;\r\n        errors.name['isError'] = !formIsValid;\r\n        errors.name['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['address']){\r\n        formIsValid = false;\r\n        errors.address['isError'] = !formIsValid;\r\n        errors.address['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['phoneNumber']){\r\n        formIsValid = false;\r\n        errors.phoneNumber['isError'] = !formIsValid;\r\n        errors.phoneNumber['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['phoneNumber'] && isNaN(fields['phoneNumber'])){\r\n        formIsValid = false;\r\n        errors.phoneNumber['isError'] = !formIsValid;\r\n        errors.phoneNumber['errorText'] = 'Quantity has to be a number';\r\n      }\r\n\r\n      if(!fields['email']){\r\n        formIsValid = false;\r\n        errors.email['isError'] = !formIsValid;\r\n        errors.email['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(typeof fields[\"email\"] !== \"undefined\"){\r\n        let lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n        let lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n          formIsValid = false;\r\n          errors.email['isError'] = !formIsValid;\r\n          errors.email[\"errorText\"] = \"Email is not valid\";\r\n         }\r\n      }\r\n      \r\n      if(fields['products'].length == 0){\r\n          formIsValid = false;\r\n          errors.products['isError'] = !formIsValid;\r\n          errors.products[\"errorText\"] = \"You must add atleast 1 product.\";\r\n      }\r\n\r\n      setQuotationValidationErrors(errors);\r\n\r\n      return formIsValid;\r\n    }\r\n\r\n    const handleProductValidation = () => {\r\n      const fields = product;\r\n      let errors = {...productValidationErrors};\r\n      let formIsValid = true;\r\n      \r\n      // Cannot be empty\r\n      if(!fields['modelNumber']){\r\n        formIsValid = false;\r\n        errors.modelNumber['isError'] = !formIsValid;\r\n        errors.modelNumber['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['brand']){\r\n        formIsValid = false;\r\n        errors.brand['isError'] = !formIsValid;\r\n        errors.brand['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      if(!fields['quantity']){\r\n        formIsValid = false;\r\n        errors.quantity['isError'] = !formIsValid;\r\n        errors.quantity['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['quantity'] && isNaN(fields['quantity'])){\r\n        formIsValid = false;\r\n        errors.quantity['isError'] = !formIsValid;\r\n        errors.price['errorText'] = 'Quantity has to be a number';\r\n      }\r\n\r\n      if(!fields['tax']){\r\n        formIsValid = false;\r\n        errors.tax['isError'] = !formIsValid;\r\n        errors.tax['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // quantity has to be a number\r\n      if(fields['tax'] && isNaN(fields['tax'])){\r\n        formIsValid = false;\r\n        errors.tax['isError'] = !formIsValid;\r\n        errors.tax['errorText'] = 'Tax has to be a number';\r\n      }\r\n\r\n      if(!fields['discount']){\r\n        formIsValid = false;\r\n        errors.discount['isError'] = !formIsValid;\r\n        errors.discount['errorText'] = 'Cannot be empty';\r\n      }\r\n\r\n      // discount has to be a number\r\n      if(fields['discount'] && isNaN(fields['discount'])){\r\n        formIsValid = false;\r\n        errors.disocunt['isError'] = !formIsValid;\r\n        errors.disocunt['errorText'] = 'Discount has to be a number';\r\n      }\r\n\r\n      setProductValidationErrors(errors);\r\n      return formIsValid;\r\n    }\r\n\r\n    async function searchDb(event){\r\n        setSearchResults([]);\r\n        if(event.target.value !== ''){\r\n          await db.collection('products').where('modelNumber', '>=', event.target.value).where('modelNumber', '<=', event.target.value + '\\uf8ff').get().then(function(snapshot){      \r\n            setSearchResults(snapshot.docs.map(doc => (\r\n              {\r\n                productId:doc.id,\r\n                modelNumber: doc.data().modelNumber,\r\n                description: doc.data().description,\r\n                imageURL: doc.data().imageURL,\r\n                price: doc.data().price\r\n              }\r\n            )));\r\n          });\r\n        }\r\n      }\r\n    \r\n      const searchListClickHandler = (selectedproduct) => {\r\n          setProduct({...product, ...selectedproduct});\r\n          setSearchResults([]);\r\n      }\r\n\r\n      const productInputHandler = (key, value) => {\r\n        setProduct({...product, [key]: value});\r\n      }\r\n\r\n      const customerInputHandler = (key, value) => {\r\n        setQuotation({...quotation, [key]: value});\r\n      }\r\n\r\n      const calculateProductPricing = (unitPrice, quantity, tax, discount) => {\r\n        const productPrice = unitPrice * quantity;\r\n        const taxValue = (tax/100)* productPrice;\r\n        const discountValue = Math.ceil((discount/100) * productPrice);\r\n        const totalPrice = Math.ceil((productPrice - discountValue) + taxValue);\r\n\r\n        const productPricing = {\r\n          productPrice : productPrice,\r\n          taxValue: taxValue,\r\n          discountValue: discountValue,\r\n          totalPrice: totalPrice\r\n        }\r\n\r\n        if(totalPrice === taxValue){\r\n            return 0\r\n        }else{\r\n          return productPricing;\r\n        }\r\n    }\r\n    \r\n      const addProductHandler = (event) => { \r\n        if(handleProductValidation()){\r\n          let newQuotation = quotation;   \r\n          let newProduct = product;  \r\n          let grandTotal = 0;\r\n          let totalTax = 0;\r\n          let totalDiscount = 0;\r\n          let productPricing = calculateProductPricing(newProduct.price, newProduct.quantity, newProduct.tax, newProduct.discount);\r\n          console.log(productPricing);\r\n\r\n          newProduct['productPricing'] = productPricing;\r\n\r\n          newQuotation['products'] = newQuotation['products'] ? newQuotation['products'] : [];\r\n\r\n          newQuotation['products'].push(newProduct);\r\n\r\n          newQuotation.products.forEach(product => {\r\n            grandTotal += product.productPricing.totalPrice;\r\n            totalDiscount += product.productPricing.discountValue;\r\n            totalTax += product.productPricing.taxValue;\r\n          });\r\n\r\n          newQuotation['totalPricing'] = {\r\n            grandTotal: grandTotal,\r\n            totalDiscount: totalDiscount,\r\n            totalTax: totalTax,\r\n          };\r\n\r\n          setQuotation(newQuotation);\r\n          setProduct(productInitialState);\r\n\r\n          setProductValidationErrors({\r\n            brand: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            modelNumber: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            quantity: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            tax: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            discount: {\r\n              isError: false,\r\n              errorText: ''\r\n            }\r\n          })\r\n        }\r\n        event.preventDefault();\r\n\r\n      }\r\n\r\n      const quotationSubmitHandler = () => {\r\n        if(handleQuotationValidation()){\r\n          let newQuotation = quotation;\r\n          newQuotation[\"timestamp\"] = firebase.firestore.FieldValue.serverTimestamp();\r\n          db.collection(\"quotations\").doc(match.params.id).update(newQuotation).then(async function(docRef) {\r\n            setPdfLink(`https://us-central1-uniquote-d48ca.cloudfunctions.net/makePdf/quotations/${docRef.id}/pdf`);\r\n          })\r\n          .catch(function(error) {\r\n              console.error(\"Error adding document: \", error);\r\n          });\r\n  \r\n          setQuotation(quotationInitialState);\r\n          setProduct(productInitialState);\r\n          setQuotationValidationErrors({\r\n            name: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            address: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            phoneNumber: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            email: {\r\n              isError: false,\r\n              errorText: ''\r\n            },\r\n            products: {\r\n              isError: false,\r\n              errorText: ''\r\n            }\r\n          });\r\n          handleOpen();\r\n        }\r\n\r\n      }\r\n\r\n      const deleteTableProduct = (productId) => {\r\n        let newQuotation = {...quotation};\r\n\r\n        const productIndex = newQuotation.products.findIndex(p => p.productId === productId);\r\n\r\n        newQuotation.totalPricing['grandTotal'] -= newQuotation.products[productIndex].productPricing.totalPrice;\r\n        newQuotation.totalPricing['totalDiscount'] -= newQuotation.products[productIndex].productPricing.discountValue;\r\n        newQuotation.totalPricing['totalTax'] -= newQuotation.products[productIndex].productPricing.taxValue;\r\n\r\n        if(productIndex > -1){\r\n          newQuotation.products.splice(productIndex, 1);\r\n        }\r\n\r\n        setQuotation(newQuotation);\r\n      }\r\n\r\n      const editTableProduct = (productId) => {\r\n        let newQuotation = {...quotation};\r\n        let newProduct = {};\r\n        const productIndex = newQuotation.products.findIndex(p => p.productId === productId);\r\n\r\n        if(productIndex > -1){\r\n            newProduct = {\r\n              brand: newQuotation.products[productIndex].brand,\r\n              modelNumber: newQuotation.products[productIndex].modelNumber,\r\n              description: newQuotation.products[productIndex].description,\r\n              price: newQuotation.products[productIndex].price,\r\n              imageURL: newQuotation.products[productIndex].imageURL,\r\n              quantity: newQuotation.products[productIndex].quantity,\r\n              discount: newQuotation.products[productIndex].discount,\r\n              tax: newQuotation.products[productIndex].tax\r\n            }\r\n        }\r\n        setProduct(newProduct);\r\n        deleteTableProduct(productId);\r\n      }\r\n\r\n      console.log(quotationValidationErrors);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Edit Quotation</h1>\r\n\r\n            <CustomerInputForm \r\n            quotation={quotation} \r\n            customerInputHandler={customerInputHandler}\r\n            validationErrors={quotationValidationErrors} \r\n            ></CustomerInputForm>\r\n\r\n            <ProductTable editTableProduct={editTableProduct} deleteTableProduct={deleteTableProduct} quotation={quotation} />\r\n\r\n            <ProductSearch \r\n                  addProductHandler={addProductHandler} \r\n                  productInputHandler={productInputHandler} \r\n                  searchResults={searchResults} \r\n                  product={product} searchDb={searchDb} \r\n                  calculateProductPrice={calculateProductPricing} \r\n                  searchListClickHandler={searchListClickHandler}\r\n                  validationErrors={productValidationErrors} \r\n                  />\r\n            \r\n            <Button \r\n            className={classes.quotationSubmitButton} \r\n            size=\"large\" \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={() => {quotationSubmitHandler()}}>Update Quotation</Button>\r\n\r\n            <div style={{color: 'red'}}>\r\n                {quotationValidationErrors.products.isError ? quotationValidationErrors.products.errorText : null}\r\n            </div>\r\n\r\n            <Modal open={open} handleClose={handleClose}>\r\n              <p>Quotation has been Updated</p>\r\n              <a href={pdfLink}>Download PDF</a>\r\n            </Modal>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default EditQuotation\r\n",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":38,"column":12,"nodeType":"132","messageId":"133","endLine":38,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":40,"column":11,"nodeType":"132","messageId":"133","endLine":40,"endColumn":21},{"ruleId":"130","severity":1,"message":"135","line":44,"column":11,"nodeType":"132","messageId":"133","endLine":44,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":154,"column":80,"nodeType":"138","messageId":"139","endLine":154,"endColumn":82},{"ruleId":"130","severity":1,"message":"140","line":1,"column":24,"nodeType":"132","messageId":"133","endLine":1,"endColumn":32},{"ruleId":"130","severity":1,"message":"141","line":3,"column":9,"nodeType":"132","messageId":"133","endLine":3,"endColumn":13},{"ruleId":"130","severity":1,"message":"142","line":16,"column":19,"nodeType":"132","messageId":"133","endLine":16,"endColumn":22},{"ruleId":"124","replacedBy":"143"},{"ruleId":"126","replacedBy":"144"},{"ruleId":"130","severity":1,"message":"145","line":1,"column":30,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"146","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":13},{"ruleId":"130","severity":1,"message":"141","line":7,"column":9,"nodeType":"132","messageId":"133","endLine":7,"endColumn":13},{"ruleId":"147","severity":1,"message":"148","line":60,"column":8,"nodeType":"149","endLine":60,"endColumn":10,"suggestions":"150"},{"ruleId":"147","severity":1,"message":"148","line":106,"column":8,"nodeType":"149","endLine":106,"endColumn":10,"suggestions":"151"},{"ruleId":"136","severity":1,"message":"137","line":156,"column":36,"nodeType":"138","messageId":"139","endLine":156,"endColumn":38},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],"no-unused-vars","'open' is assigned a value but never used.","Identifier","unusedVar","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'Link' is defined but never used.","'res' is assigned a value but never used.",["152"],["153"],"'useRef' is defined but never used.","'Modal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["154"],["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"156","fix":"158"},"Update the dependencies array to be: [match.params.id]",{"range":"159","text":"160"},{"range":"161","text":"160"},[1733,1735],"[match.params.id]",[2654,2656]]